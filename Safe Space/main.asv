%% Main menu
while 1
% Housekeeping
clearvars truth

list = { 'Import Truth Data', 'Plot Truth Data', 'Import Test Data', ...
    'Plot Test Data', 'Correlate Multiple Tests' };
answer = listdlg( 'PromptString', 'Choose Action', 'ListString', ...
    list, 'SelectionMode', 'Single' );

% answer will be one of the following: 1,2,3,4,5,[]
% each number corresponds to the choice selected
% [] indicates closed out or cancelled

if isempty( answer ) % canceled/closed out
    fprintf( 'Exiting.\n' )
    return
end

fprintf( [ list{answer}, ' selected.\n' ] )

if answer == 5
    fprintf( 'Not supported yet.\n' )
    % probably redirect to some correlation function/wrapper
    % ehem... //TODO
    continue
end

% 1-4 has been selected
m = msgbox( 'Select Test Folder.' );
waitfor(m)

if ~exist( 'path', 'var' )
    path = '';
end

path = uigetdir( path );

if ~path
    fprintf( 'Cancelling.\n' )
    clearvars path
    continue
end

disp( [ path, ' selected as testing folder.' ] )

truth_name = [ path, '/truth.json' ];

% now is the time to separate out choices
% 1: Import Truth Data
% 2: Plot Truth Data
% 3: Import Test Data
% 4: Plot Test Data
switch answer
    case 1
        % check for pre-expisting truth file
        if exist( truth_name, 'file' )
            warning( 'Truth file already exists.' )
            answer = questdlg( [ 'Truth file already exists. ', ...
                'Delete it and continue?' ], 'WARNING', 'Yes', 'No', ...
                'No' );
            switch answer
                case 'Yes'
                    delete(truth_name)
                    fprintf( [ truth_name, ' deleted.\n' ] )
                otherwise
                    fprintf( [ truth_name, ' not deleted.\n', ...
                        'Import Truth Data canceled.\n' ] )
                    continue
            end
        end
        
        % import raw truth data
        [ t, x, y, z ] = importTruthData( path );
        
        % if import was cancelled
        if isempty(t)
            fprintf( 'Import Truth Data canceled.\n' )
            continue
        end
        
        % import correction
        if exist( [ path, 'correction.m' ], 'file' )
            run( [ path, 'correction.m' ] )
            % this loads the data in correction.m:
            % a struct called "correction" with the fields:
            % - nSats: the number of CubeSats
            % - t: The time correction to the truth data
            % - x(i): the X correction for cubesat i
            % - y(i): the Y correction for cubesat i
            % - z(i): the Z correction for cubesat i
            % correction.x/y/z are nSats long
            
        else % correction.m file does not exist
            warning( 'No corrections file found.' )
            answer = questdlg( [ 'No corrections file found. ', ...
                'Import truth data as 1 CubeSat with no corrections?' ],...
                'WARNING', 'Yes', 'No', 'Yes' );
            
            switch answer
                case 'Yes'
                    fprintf( [ 'Continuing with 1 CubeSat and no ', ...
                        'corrections to Truth Data.\n' ] )
                    correction.nSats = 1;
                    correction.t = 0;
                    correction.x = 0;
                    correction.y = 0;
                    correction.z = 0;
                    
                case 'No'
                    fprintf( 'Import Truth Data canceled.\n' )
                    continue
                    
                otherwise
                    fprintf( [ '¯\\_(', char(12471), ...
                        ')_/¯ guess I''ll die...\n' ] )
                    error( [ 'Tell Marshall his code is jank and how ', ...
                        'you got here.' ] )
                    
            end
        end
        
        % generate truth struct
        t = t + correction.t;
        
        for i = 1 : length(t)
            truth(i).t = t(i);
            for j = 1 : correction.nSats
                truth(i).pos.( [ 'CubeSat_', num2str(j) ] ) = ...
                    [ x(i) + correction.x(j); y(i) + correction.y(j); ...
                    z(i) + correction.z(j); ];
            end
        end
        
        % generate truth file
        fID = fopen( truth_name, 'w' );
        jason = jsonencode( truth );
        fprintf( fID, jason );
        fclose(fID);
        fprintf( 'Import Truth Data complete.\n' )
        
    case 2
        
        % check for truth file existance
        if ~exist( truth_name, 'file' )
            warning( 'Truth file does not exist.' )
            warndlg( 'Truth file does not exist.' )
            fprintf( 'Plot Truth Data cancelled.\n' )
            continue
        end
        
        % extract truth data
        truth = jsondecode( fileread( truth_name ) );
        % number of datapoints
        for i = 1 : length( truth.t )
            % number of CubeSats
            t(i) = truth(i).t
            for j = 1 : length( truth(1).pos )
                x{j}(i) = truth(i).pos.( [ 'CubeSat_', num2str(j) ] )
            end
        end
        
    case 3
        
    case 4
        
    otherwise
        fprintf( [ '¯\\_(', char(12471), ')_/¯ guess I''ll die...\n' ] )
        error( 'Tell Marshall his code is jank and how you got here.' )
        
end

end